#include <Arduino.h>
#include <ESP32SPISlave.h>

// Pines donde están conectados los LEDs
#define Led1 12
#define Led2 27
#define Led3 25

// CONFIGURACIÓN SPI
ESP32SPISlave slave;

// Pines para la comunicación SPI
const int VSPI_MISO = 19;
const int VSPI_MOSI = 23;
const int VSPI_SCLK = 18;
const int VSPI_SS = 5;

static constexpr uint32_t BUFFER_SIZE {32};
uint8_t spi_slave_tx_buf[BUFFER_SIZE]; // Transmite datos por SPI
uint8_t spi_slave_rx_buf[BUFFER_SIZE]; // Recibe datos por SPI

// Variables de control
char cmd;
char umil, centena, decena, unidad;

int tiempo(char numero); // Prototipo de función

void setup() {
  Serial.begin(115200);
  delay(2000); // Tiempo para estabilizar la comunicación

  // Inicializa SPI en modo esclavo
  slave.setDataMode(SPI_MODE0);
  slave.setQueueSize(1);
  slave.begin(VSPI);

  // Configura los pines de los LEDs como salidas
  pinMode(Led1, OUTPUT);
  pinMode(Led2, OUTPUT);
  pinMode(Led3, OUTPUT);

  // Limpia los buffers de SPI
  memset(spi_slave_tx_buf, 0, BUFFER_SIZE);
  memset(spi_slave_rx_buf, 0, BUFFER_SIZE);
}

void loop() {
  // Espera a que se reciba datos por SPI
  slave.wait(spi_slave_rx_buf, spi_slave_tx_buf, BUFFER_SIZE);
  
  // Verifica si hay datos disponibles
  if (slave.available()) {
    // Lee el comando y los valores
    cmd = spi_slave_rx_buf[0];
    umil = spi_slave_rx_buf[2];
    centena = spi_slave_rx_buf[3];
    decena = spi_slave_rx_buf[4];
    unidad = spi_slave_rx_buf[5];

    // Convierte los valores de ASCII a enteros
    int tiempoTotal = (tiempo(umil) * 1000) + (tiempo(centena) * 100) + (tiempo(decena) * 10) + tiempo(unidad);
    
    Serial.printf("Encendiendo LED %d por %d ms\n", cmd - '0', tiempoTotal);

    // Enciende el LED correspondiente y espera el tiempo especificado
    switch (cmd) {
      case '1':
        digitalWrite(Led1, HIGH);
        delay(tiempoTotal);
        digitalWrite(Led1, LOW);
        break;
      case '2':
        digitalWrite(Led2, HIGH);
        delay(tiempoTotal);
        digitalWrite(Led2, LOW);
        break;
      case '3':
        digitalWrite(Led3, HIGH);
        delay(tiempoTotal);
        digitalWrite(Led3, LOW);
        break;
    }
    
    // Aquí se envía un comando de finalización
    spi_slave_tx_buf[0] = 0; // Indica que terminó
    slave.pop();
  }
}

// Función para convertir ASCII a número entero
int tiempo(char numero) {
  return numero - '0'; // Convierte el carácter ASCII al valor numérico
}
