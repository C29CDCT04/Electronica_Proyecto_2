#include <Arduino.h>
#include <ESP32SPISlave.h>
#include "Wire.h"

// Pines donde están conectados los LEDs
#define Led1 12 // Verde
#define Led2 27 // Amarillo
#define Led3 25 // Rojo

// Pin del potenciómetro
#define pot 34

// Configuración SPI
ESP32SPISlave slave;

// Configuración del I2C
#define I2C_DEV_ADDR 0x55

// Pines para la comunicación SPI
const int VSPI_MISO = 19;
const int VSPI_MOSI = 23;
const int VSPI_SCLK = 18;
const int VSPI_SS = 5;

static constexpr uint32_t BUFFER_SIZE {32};
uint8_t spi_slave_tx_buf[BUFFER_SIZE]; // Transmite datos por SPI
uint8_t spi_slave_rx_buf[BUFFER_SIZE]; // Recibe datos por SPI

// Variables de control
char cmd;
char unimil, cen, dec, uni;

// Prototipo de función
int tiempo(char numero);
void onRequest(); // Callback en comunicación I2C
void onReceive(int len); // Callback en comunicación I2C

void setup() {
  Serial.begin(115200);
  delay(2000); // Tiempo para estabilizar la comunicación

  // Inicializa SPI en modo esclavo
  slave.setDataMode(SPI_MODE0);
  slave.setQueueSize(1);
  slave.begin(VSPI);

  Serial.setDebugOutput(true);
  Wire.onReceive(onReceive);
  Wire.onRequest(onRequest);
  Wire.begin((uint8_t)I2C_DEV_ADDR); // Inicializa el I2C como esclavo

  // Configura los pines (salidas o entradas)
  pinMode(Led1, OUTPUT);
  pinMode(Led2, OUTPUT);
  pinMode(Led3, OUTPUT);
  pinMode(pot, INPUT);

  // Limpia los buffers de SPI
  memset(spi_slave_tx_buf, 0, BUFFER_SIZE);
  memset(spi_slave_rx_buf, 0, BUFFER_SIZE);
}

void loop() {
  // Espera a que se reciba datos por SPI
  slave.wait(spi_slave_rx_buf, spi_slave_tx_buf, BUFFER_SIZE);
  
  // Verifica si hay datos disponibles
  if (slave.available()) {
    // Lee el comando y los valores
    cmd = spi_slave_rx_buf[0];
    unimil = spi_slave_rx_buf[2];
    cen = spi_slave_rx_buf[3];
    dec = spi_slave_rx_buf[4];
    uni = spi_slave_rx_buf[5];

    // Convierte los valores de ASCII a enteros
    int tiempoTotal = (tiempo(unimil) * 1000) + (tiempo(cen) * 100) + (tiempo(dec) * 10) + tiempo(uni);
    
    Serial.printf("Encendiendo LED %d por %d ms\n", cmd - '0', tiempoTotal);

    // Enciende el LED correspondiente y espera el tiempo especificado
    switch (cmd) {
      case '1':
        digitalWrite(Led1, HIGH);
        delay(tiempoTotal);
        digitalWrite(Led1, LOW);
        break;
      case '2':
        digitalWrite(Led2, HIGH);
        delay(tiempoTotal);
        digitalWrite(Led2, LOW);
        break;
      case '3':
        digitalWrite(Led3, HIGH);
        delay(tiempoTotal);
        digitalWrite(Led3, LOW);
        break;
    }
    
    // Aquí se envía un comando de finalización
    spi_slave_tx_buf[0] = 0; // Indica que terminó
    slave.pop();
  }
}

// Función para convertir ASCII a número entero
int tiempo(char numero) {
  return numero - '0'; // Convierte el carácter ASCII al valor numérico
}

void onRequest() {
    // Lee el valor analógico del potenciómetro (0 - 4095)
    unsigned int valorPot = analogRead(pot);  

    // Crear un buffer de 5 caracteres para 4 dígitos más el terminador nulo
    char buffer[5];  
    snprintf(buffer, sizeof(buffer), "%04u", valorPot);  // Formatear con 4 dígitos (rellenando con ceros)

    // Enviar la cadena por I2C (cast explícito a uint8_t*)
    Wire.write((const uint8_t*)buffer, 4);  

    // Imprimir el valor en el monitor serial para depuración
    Serial.print("onRequest: ");
    Serial.println(buffer);
}

void onReceive(int len){
  Serial.printf("onReceive[%d]:",len);
  while(Wire.available()){
    uint8_t incomingByte=Wire.read();
    Serial.write(incomingByte);
  }
}
